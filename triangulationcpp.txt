void CDTProcessor::antColonyOptimization(CDT& cdt, double alpha, double beta, double xi, double psi,int lambda, int num_cycles, int num_ants) {
        std::map<CDT::Face_handle, std::map<Point, double>> pheromone;
        // Αρχικοποίηση φερομονών
        for (auto face = cdt.finite_faces_begin(); face != cdt.finite_faces_end(); ++face) {
            auto steiner_options = generateSteinerOptions(face);
            for (const auto& point_option : steiner_options) {
                pheromone[face][point_option] = 1.0; // Αρχική τιμή φερομονών
            }
        }

        CDT best_cdt;
        copyTriangulation(cdt, best_cdt);
        int best_obtuse_count = countObtuseTriangles(best_cdt);

        for (int cycle = 0; cycle < num_cycles; ++cycle) {
            std::vector<AntSolution> all_solutions; // Συνολικές λύσεις μυρμηγκιών

            for (int ant = 0; ant < num_ants; ++ant) {
                std::vector<AntSolution> ant_solutions; // Λύσεις του συγκεκριμένου μυρμηγκιού

                // Επιλογή τριγώνων στην τύχη
                std::vector<CDT::Face_handle> candidate_faces;
                for (auto face = cdt.finite_faces_begin(); face != cdt.finite_faces_end(); ++face) {
                    if (isObtuseTriangle(face->vertex(0)->point(), face->vertex(1)->point(), face->vertex(2)->point())) {
                        candidate_faces.push_back(face);
                    }
                }

                if (candidate_faces.empty()){
                    std::cout<<"1 CONTINUE\n\n";
                    continue;
                }

                std::shuffle(candidate_faces.begin(), candidate_faces.end(), std::default_random_engine());
                
                for (auto& face : candidate_faces) {
                    // Υπολογισμός πιθανοτήτων επιλογής Steiner σημείων
                    auto steiner_options = generateSteinerOptions(face);
                    if (steiner_options.empty()){
                        std::cout<<"2 CONTINUE\n\n";
                        continue;
                    }

                    double total_probability = 0.0;
                    std::vector<std::pair<Point, double>> probabilities;

                    for (const auto& point_option : steiner_options) {
                        double tau = std::pow(pheromone[face][point_option], xi);
                        double eta = calculateHeuristic(face->vertex(0)->point(), face->vertex(1)->point(), face->vertex(2)->point(), "circumcenter");
                        double probability = tau * std::pow(eta, psi);
                        probabilities.emplace_back(point_option, probability);
                        total_probability += probability;
                    }

                    if (total_probability <= 0.0){
                        std::cout<<"3 CONTINUE\n\n";
                        continue;
                    }

                    // Επιλογή σημείου με πιθανότητα
                    Point selected_point = selectSteinerPoint(probabilities, total_probability);

                    // Προσομοίωση προσθήκης σημείου
                    CDT temp_cdt;
                    copyTriangulation(cdt, temp_cdt);
                    temp_cdt.insert(selected_point);
                    int new_obtuse_count = countObtuseTriangles(temp_cdt);
                    double energy_gain = best_obtuse_count - new_obtuse_count;

                    //if (energy_gain > 0) {
                        AntSolution solution = {face, selected_point, energy_gain};
                        ant_solutions.push_back(solution);
                        //ant_solutions.push_back({face, selected_point, energy_gain});
                    //}
                }

                all_solutions.insert(all_solutions.end(), ant_solutions.begin(), ant_solutions.end());
            }

            // Επίλυση συγκρούσεων μεταξύ λύσεων μυρμηγκιών
            std::vector<AntSolution> resolved_solutions = resolve_conflicts(all_solutions);

            // Εφαρμογή λύσεων στο CDT
            CDT merged_cdt;
            copyTriangulation(best_cdt, merged_cdt);
            for (const auto& solution : resolved_solutions) {
                applyAntSolution(solution, merged_cdt);
            }

            // Ενημέρωση του καλύτερου τριγωνισμού
            int current_obtuse_count = countObtuseTriangles(merged_cdt);
            if (current_obtuse_count < best_obtuse_count) {
                best_obtuse_count = current_obtuse_count;
                copyTriangulation(merged_cdt, best_cdt);
            }

            // Ενημέρωση φερομονών
            UpdatePheromones(pheromone,resolved_solutions, alpha, beta, xi);

            std::cout << "[DEBUG] Cycle " << cycle + 1 << ": Best obtuse triangles: " << best_obtuse_count << std::endl;
        }

        // Επιστροφή του καλύτερου τριγωνισμού
        copyTriangulation(best_cdt, cdt);
        std::cout << "Total obtuse triangles after ant colony: " << countObtuseTriangles(cdt) << std::endl;
        CGAL::draw(cdt);
    }













#ifndef TRIANGULATION_H
#define TRIANGULATION_H
#define BOOST_ALLOW_DEPRECATED_HEADERS

#include <vector>
#include <CGAL/Exact_predicates_inexact_constructions_kernel.h>
#include <CGAL/Constrained_Delaunay_triangulation_2.h>
#include <CGAL/Triangulation_vertex_base_with_info_2.h>
#include <boost/json.hpp>

namespace json = boost::json;

typedef CGAL::Exact_predicates_inexact_constructions_kernel K;
typedef CGAL::Triangulation_vertex_base_with_info_2<std::size_t, K> Vb;
typedef CGAL::Constrained_triangulation_face_base_2<K> Fb;
typedef CGAL::Triangulation_data_structure_2<Vb, Fb> Tds;
typedef CGAL::Constrained_Delaunay_triangulation_2<K, Tds> CDT;
typedef CDT::Point Point;

struct AntSolution {
    CDT::Face_handle face;      // Το τρίγωνο στο οποίο έγινε η βελτίωση
    Point steiner_point;        // Το επιλεγμένο Steiner σημείο
    double improvement_metric;  // Μετρική βελτίωσης (π.χ., μείωση σε αριθμό οξέων τριγώνων)
};

namespace Triangulation {

    // We are using this class to handle the CDT processing
    class CDTProcessor {
    public:
        //Constructor to initialize a CDTProcessor Object given the points, constraints , region boundary and a unique instance ID (the input file name) 
        CDTProcessor(const std::vector<std::pair<double, double>>& points, const std::vector<std::pair<int, int>>& constraints,const std::vector<int>& region_boundary,const std::string& instance_uid,const std::string& method,const std::map<std::string,double>& parameters);
        
        //This is the Main function to process the triangulation 
        void processTriangulation();

        void selectMethod(CDT &cdt, const std::string& method,const std::map<std::string, double>& parameters);

        CDT createCDT();

    private:
        //Variables to store the points , constraints , region boundary and instance uid
        std::vector<std::pair<double, double>> points_;
        std::vector<std::pair<int, int>> constraints_;
        std::vector<int> region_boundary_; 
        std::string instance_uid_; 
        std::string method_;
        std::map<std::string,double> parameters_;
        //std::map<CDT::Face_handle, std::map<Point, double>> pheromone;

        // This function checks if the point pt is on the line segment formed by points p1 and p2
        bool isPointOnSegment(const std::pair<double, double>& pt, const std::pair<double, double>& p1, const std::pair<double, double>& p2);

        //This function checks if a given point lies inside the region boundary 
        bool isPointInsideBoundary(const std::pair<double, double>& point,const std::vector<int>& region_boundary,const std::vector<std::pair<double, double>>& points) const ;

        // This function checks if a point is inside a polygon
        bool isPointInPolygon(const std::pair<double, double>& pt, const std::vector<std::pair<double, double>>& polygon);

        //This function is checking if a triangle is within the given boundary defined by region_boundary
        bool isTriangleWithinBoundary(const CDT::Face_handle& face, const std::vector<int>& boundary);
        
        // This function calculates the squared distance between two points
        double squaredDistance(const Point& p1, const Point& p2);

        // This function checks if a triangle is obtuse
        bool isObtuseTriangle(const Point& p1, const Point& p2, const Point& p3);
        
        //This function counts the obtuse triangles in the triangulation
        int countObtuseTriangles(const CDT& cdt);
        
        // This function attempts to flip an edge returns true if a flip done otherwise false (RETURNS FALSE ALWAYS!!)
        bool tryEdgeFlipping(CDT& cdt, CDT::Face_handle face);
        
        // This function is to simulate the effect of a Steiner point without adding it to the triangulation
        int simulateSteinerEffect(CDT& cdt, const Point& steiner_point);

        // This function is used to get the midpoint of the longest edge
        Point getMidpointOfLongestEdge(const Point& p1, const Point& p2, const Point& p3);

        // This function calculates the incenter of a triangle
        Point calculate_incenter(const Point& a, const Point& b, const Point& c);
        
        //This function finds a point that lies on the perpendicular bisector of the line segment connecting two points a and b
        Point calculate_perpendicular_bisector_point(const Point& a, const Point& b, const Point& c);
        
        // This function computes the orthogonal projection of point p onto the triangle
        Point projectPointOntoTriangle(const Point& p, const Point& p1, const Point& p2, const Point& p3);

        // This function creates a JSON object for output
        json::object createOutputJson(const std::string& instance_uid,const std::vector<std::pair<double, double>>& steiner_points,const std::vector<std::pair<int, int>>& edges);
        
        // This function prints the output JSON to the console
        void printOutputJson(const json::object& output_json);

        //This function processes all convex polygons in the CDT 
        void processConvexPolygon(CDT& cdt);

        //This function calculates the centroid of a set of points
        Point calculateCentroid(const std::vector<Point>& points);

        //This function determines whether a given face in the CDT contains any constrained edges
        bool hasConstrainedEdge(CDT::Face_handle face, const CDT& cdt);

        //This function checks if a given vertex is part of any constrained edge in the CDT
        bool isVertexOnConstrainedEdge(CDT::Vertex_handle vertex, const CDT& cdt);

        //This function ensures that a given set of points forms a convex polygon by computing the convex hull
        std::vector<Point> ensureConvexPolygon(const std::vector<Point>& points);

        Point getMeanAdjacentPoint(CDT::Face_handle face, CDT& cdt);

        double calculateAngle(const Point& p1, const Point& p2, const Point& p3);

        double calculateAnglePenalty(const CDT& cdt);

        void localSearch(CDT& cdt, double L);

        void simulatedAnnealing(CDT& cdt,double alpha,double beta,int L);

        void insertSteinerPoint(CDT& cdt, const std::pair<double, double>& point);
        
        double getRandomUniform();

        int getRandomIndex(int size);

        double calculateEnergy(const CDT& cdt, double alpha, double beta,int numberOfSteinerPoints);
    
        void antColonyOptimization(CDT& cdt, double alpha, double beta, double xi, double psi,int lambda, int num_cycles, int num_ants);

        double calculateHeuristic(const Point& p1,const Point& p2,const Point&p3,const std::string& strategy);

        bool pointExistsInTriangulation(const CDT& cdt, const Point& point);

        bool isImprovingSteinerPoint(const CDT& cdt, const Point& steinerPoint,double alpha,double beta,int counterSteiner);
    
        Point selectSteinerPoint(const std::vector<std::pair<Point, double>>& options, double totalWeight);


        std::vector<Point> generateSteinerOptions(const CDT::Face_handle& face);
        std::vector<AntSolution> resolve_conflicts(const std::vector<AntSolution>& solutions);
        void applyAntSolution(const AntSolution& solution, CDT& cdt);

        void UpdatePheromones(std::map<CDT::Face_handle, std::map<Point, double>>& pheromone,const std::vector<AntSolution>& solutions, double lambda, double alpha, double beta);
        void copyTriangulation(const CDT& source, CDT& destination);
    };
}

#endif // TRIANGULATION_H